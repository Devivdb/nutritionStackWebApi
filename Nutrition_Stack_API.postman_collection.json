{
	"info": {
		"_postman_id": "nutrition-stack-api",
		"name": "Nutrition Stack API",
		"description": "API collection for the Nutrition Stack Web API - User Authentication\n\nüîê **Token Management**:\n- Run 'Register User' or 'Login User' first to get a JWT token\n- The token is automatically saved and used by all other requests\n- If you get 401/403 errors, the token is automatically cleared - just login again\n- No need to manually copy-paste tokens!\n\nüçΩÔ∏è **Meal Management Variables**:\n- `{{mealId}}`: Set this to the ID of the meal you want to work with\n- `{{productEan}}`: Set this to the EAN13 code of the product you want to work with\n- These variables make it easy to test different meals and products without changing URLs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "mealId",
			"value": "1",
			"description": "ID of the meal to work with"
		},
		{
			"key": "productEan",
			"value": "1234567890123",
			"description": "EAN13 code of the product to work with"
		},
		{
			"key": "goalId",
			"value": "1",
			"description": "ID of the goal to work with"
		}
	],
	"event": [
		{
			"listen": "test",
			"script": {
				"exec": [
					"// Collection-level script to handle authentication errors",
					"if (pm.response.code === 401 || pm.response.code === 403) {",
					"    // Clear token if authentication fails",
					"    pm.collectionVariables.unset('authToken');",
					"    console.log('Authentication failed - token cleared');",
					"    console.log('Please login again to get a new token');",
					"}"
				],
				"type": "text/javascript"
			}
		}
	],
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract token from response and set as collection variable",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.token) {",
									"        pm.collectionVariables.set('authToken', responseJson.token);",
									"        console.log('Token saved:', responseJson.token);",
									"        console.log('User registered and logged in automatically');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Login User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login with existing user credentials"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract token from response and set as collection variable",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.token) {",
									"        pm.collectionVariables.set('authToken', responseJson.token);",
									"        console.log('Token saved:', responseJson.token);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				}
			],
			"description": "User authentication endpoints"
		},
		{
			"name": "User Profile",
			"item": [
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						},
						"description": "Get current user's profile information"
					},
					"response": []
				},
				{
					"name": "Update User Profile (Both)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newusername\",\n    \"password\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						},
						"description": "Update both username and password"
					},
					"response": []
				},
				{
					"name": "Update User Profile (Username Only)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newusername\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						},
						"description": "Update only username (password remains unchanged)"
					},
					"response": []
				},
				{
					"name": "Update User Profile (Password Only)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						},
						"description": "Update only password (username remains unchanged)"
					},
					"response": []
				},
				{
					"name": "Delete User Account",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						},
						"description": "Delete current user's account permanently"
					},
					"response": []
				}
			],
			"description": "User profile management endpoints"
		},
		{
			"name": "User Goals",
			"item": [
				{
					"name": "Create Goal",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"caloriesGoal\": 2000.0,\n    \"proteinGoal\": 150.0,\n    \"carbsGoal\": 200.0,\n    \"fatGoal\": 67.0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/user-goals",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user-goals"
							]
						},
						"description": "Create a new nutrition goal for the current user\n\nBody:\n- caloriesGoal: Daily calorie goal (required, 800-10000)\n- proteinGoal: Daily protein goal in grams (optional, non-negative)\n- carbsGoal: Daily carbs goal in grams (optional, non-negative)\n- fatGoal: Daily fat goal in grams (optional, non-negative)\n\nBusiness Rules:\n- Only one active goal per user at a time\n- Previous goals are automatically deactivated\n- Calories goal must be between 800-10000 for health\n- Macronutrient ratios are validated for balance"
					},
					"response": []
				},
				{
					"name": "Get Active Goal",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/user-goals/active",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user-goals",
								"active"
							]
						},
						"description": "Get the current user's active nutrition goal\n\nBusiness Rules:\n- Returns the currently active goal\n- Returns 400 if no active goal exists\n- Only shows goals for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Get All User Goals",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/user-goals",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user-goals"
							]
						},
						"description": "Get all nutrition goals for the current user (current and historical)\n\nBusiness Rules:\n- Returns all goals ordered by creation date (newest first)\n- Includes both active and inactive goals\n- Only shows goals for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Get Goal by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/user-goals/{{goalId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user-goals",
								"{{goalId}}"
							]
						},
						"description": "Get a specific nutrition goal by ID\n\nPath Variables:\n- goalId: ID of the goal to retrieve\n\nBusiness Rules:\n- Returns 404 if goal not found\n- Only shows goals for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Update Goal",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"caloriesGoal\": 2200.0,\n    \"proteinGoal\": 160.0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/user-goals/{{goalId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user-goals",
								"{{goalId}}"
							]
						},
						"description": "Update an existing nutrition goal\n\nPath Variables:\n- goalId: ID of the goal to update\n\nBody:\n- caloriesGoal: Daily calorie goal (optional, 800-10000)\n- proteinGoal: Daily protein goal in grams (optional, non-negative)\n- carbsGoal: Daily carbs goal in grams (optional, non-negative)\n- fatGoal: Daily fat goal in grams (optional, non-negative)\n\nBusiness Rules:\n- Partial updates are supported (only provide fields to change)\n- All provided values are validated\n- Returns 400 if no updates provided\n- Only the goal owner can update their goals"
					},
					"response": []
				},
				{
					"name": "Delete Goal",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/user-goals/{{goalId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user-goals",
								"{{goalId}}"
							]
						},
						"description": "Delete (deactivate) a nutrition goal\n\nPath Variables:\n- goalId: ID of the goal to delete\n\nBusiness Rules:\n- Goals are soft-deleted (marked as inactive)\n- Historical data is preserved\n- Returns 204 on successful deletion\n- Only the goal owner can delete their goals"
					},
					"response": []
				},
				{
					"name": "Reactivate Goal",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/user-goals/{{goalId}}/reactivate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user-goals",
								"{{goalId}}",
								"reactivate"
							]
						},
						"description": "Reactivate a previously inactive nutrition goal\n\nPath Variables:\n- goalId: ID of the goal to reactivate\n\nBusiness Rules:\n- Deactivates the current active goal\n- Reactivates the specified goal\n- Returns the reactivated goal details\n- Only the goal owner can reactivate their goals\n- Goal must exist and belong to the user\n- Useful for switching back to previous nutrition strategies"
					},
					"response": []
				}
			],
			"description": "User nutrition goal management endpoints"
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Create Product",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ean13Code\": \"1234567890123\",\n    \"productName\": \"Sample Product\",\n    \"amount\": 100.0,\n    \"unit\": \"g\",\n    \"calories\": 150.0,\n    \"protein\": 10.0,\n    \"carbs\": 20.0,\n    \"fat\": 5.0,\n    \"fiber\": 3.0,\n    \"sugar\": 8.0,\n    \"salt\": 0.5\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "Create a new product\n\nBody:\n- ean13Code: 13-digit EAN13 code (required)\n- productName: Product name (required)\n- amount: Serving amount (required, must be > 0)\n- unit: Unit of measurement (required, max 50 chars)\n- calories: Calories per unit (optional, non-negative)\n- protein: Protein in grams (optional, non-negative)\n- carbs: Carbohydrates in grams (optional, non-negative)\n- fat: Fat in grams (optional, non-negative)\n- fiber: Fiber in grams (optional, non-negative)\n- sugar: Sugar in grams (optional, non-negative)\n- salt: Salt in grams (optional, non-negative)\n\nBusiness Rules:\n- Authenticated users can create products\n- EAN13 code must be unique\n- Amount must be greater than 0\n- All nutrition values must be non-negative"
					},
					"response": []
				},
				{
					"name": "Get Product by EAN13",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{ean13Code}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{ean13Code}}"
							]
						},
						"description": "Get product information by EAN13 code\n\nPath Variables:\n- ean13Code: 13-digit EAN13 code\n\nBusiness Rules:\n- Authenticated users can look up products\n- Returns 404 if product not found"
					},
					"response": []
				},
				{
					"name": "Update Product",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productName\": \"Updated Product Name\",\n    \"amount\": 150.0,\n    \"unit\": \"ml\",\n    \"calories\": 160.0,\n    \"protein\": 12.0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/{{ean13Code}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{ean13Code}}"
							]
						},
						"description": "Update product information\n\nPath Variables:\n- ean13Code: 13-digit EAN13 code\n\nBody:\n- All fields are optional - only provided fields will be updated\n- productName: Product name (max 255 chars)\n- amount: Serving amount (must be > 0)\n- unit: Unit of measurement (max 50 chars)\n- calories: Calories per unit (non-negative)\n- protein: Protein in grams (non-negative)\n- carbs: Carbohydrates in grams (non-negative)\n- fat: Fat in grams (non-negative)\n- fiber: Fiber in grams (non-negative)\n- sugar: Sugar in grams (non-negative)\n- salt: Salt in grams (non-negative)\n\nBusiness Rules:\n- **SECURITY: Only the product creator or admin can update products**\n- If a user tries to update a product they didn't create, they will receive a 403 Forbidden error\n- Error message: 'Access denied: You can only update products you created. Product [name] was created by another user.'\n- Partial updates supported - only provided fields are updated\n- Amount must be greater than 0\n- All nutrition values must be non-negative"
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{ean13Code}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{ean13Code}}"
							]
						},
						"description": "Delete a product (Admin only)\n\nPath Variables:\n- ean13Code: 13-digit EAN13 code\n\nBusiness Rules:\n- Only admins can delete products\n- Deletion is permanent and cannot be undone"
					},
					"response": []
				},
				{
					"name": "Get All Products",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "Get all products in the system\n\nBusiness Rules:\n- Authenticated users can view all products\n- Returns list of all products with nutrition information"
					},
					"response": []
				}
			],
			"description": "Product management endpoints"
		},
		{
			"name": "Logged Products",
			"item": [
				{
					"name": "Log Product",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ean13Code\": \"1234567890123\",\n    \"quantity\": 100.0,\n    \"unit\": \"g\",\n    \"mealType\": \"breakfast\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/logged-products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"logged-products"
							]
						},
						"description": "Log a product consumption with quantity, unit, and meal type. The system will automatically calculate nutrition values based on the product's EAN13 code and the specified quantity.\n\nBody:\n- ean13Code: 13-digit EAN13 code (required)\n- quantity: Amount consumed (required, must be > 0)\n- unit: Unit of measurement (required)\n- mealType: Type of meal (required: breakfast, lunch, dinner, snack)\n- logDate: When the product was consumed (optional, defaults to current time automatically)\n\nNote: logDate is completely optional - if not provided, the system automatically sets it to the current time.\n\nBusiness Rules:\n- Authenticated users can log products\n- Product must exist in the system\n- Quantity must be greater than 0\n- Log date is automatically set to current time if not provided\n- Nutrition values are automatically calculated based on product data and quantity\n\nResponse Format:\nReturns simplified data with only essential fields and calculated nutrition values"
					},
					"response": []
				},
				{
					"name": "Get All Logged Products",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/logged-products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"logged-products"
							]
						},
						"description": "Get all logged products for the current user, ordered by log date (newest first)\n\nReturns:\n- Logged product details\n- Calculated nutrition values based on quantity consumed\n- Product information (name, EAN13)\n- Meal type and log date\n\nResponse Format:\nReturns simplified data with only essential fields and calculated nutrition values"
					},
					"response": []
				},
				{
					"name": "Get Logged Product by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/logged-products/{{logId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"logged-products",
								"{{logId}}"
							]
						},
						"description": "Get a specific logged product by its ID. The response includes calculated nutrition values based on the logged quantity and product information.\n\nPath Variables:\n- logId: The ID of the logged product to retrieve\n\nBusiness Rules:\n- Users can only access their own logged products\n- Returns 404 if logged product not found or doesn't belong to user\n\nResponse Format:\nReturns simplified data with only essential fields and calculated nutrition values"
					},
					"response": []
				},
				{
					"name": "Update Logged Product",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 150.0,\n    \"unit\": \"g\",\n    \"mealType\": \"lunch\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/logged-products/{{logId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"logged-products",
								"{{logId}}"
							]
						},
						"description": "Update a logged product's quantity, unit, meal type, or log date. Only the fields you want to change need to be included in the request body.\n\nPath Variables:\n- logId: The ID of the logged product to update\n\nBody (all optional):\n- quantity: New amount consumed\n- unit: New unit of measurement\n- mealType: New meal type\n- logDate: New log date (only needed if you want to change the timestamp)\n\nBusiness Rules:\n- Users can only update their own logged products\n- Quantity must be greater than 0 if provided\n- Log date cannot be in the future if provided\n- Nutrition values are automatically recalculated\n\nResponse Format:\nReturns simplified data with only essential fields and calculated nutrition values"
					},
					"response": []
				},
				{
					"name": "Delete Logged Product",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/logged-products/{{logId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"logged-products",
								"{{logId}}"
							]
						},
						"description": "Delete a logged product by its ID. Only the owner of the logged product can delete it.\n\nPath Variables:\n- logId: The ID of the logged product to delete\n\nBusiness Rules:\n- Users can only delete their own logged products\n- Deletion is permanent and cannot be undone"
					},
					"response": []
				},
				{
					"name": "Get Logged Products by Date",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							                "raw": "{{baseUrl}}/api/logged-products/by-date?date=2024-01-15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"logged-products",
								"by-date"
							],
							"query": [
								{
									"key": "date",
									"value": "2024-01-15",
									"description": "Date in YYYY-MM-DD format (e.g., 2024-01-15)"
								}
							]
						},
						"description": "Get all logged products for the current user on a specific date\n\nQuery Parameters:\n- date: Date in YYYY-MM-DD format (e.g., 2024-01-15)\n\nReturns:\n- All logged products for the specified date\n- Calculated nutrition values for each product\n\nResponse Format:\nReturns simplified data with only essential fields and calculated nutrition values"
					},
					"response": []
				},
				{
					"name": "Get Logged Products by Meal Type",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/logged-products/by-meal-type?mealType=breakfast",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"logged-products",
								"by-meal-type"
							],
							"query": [
								{
									"key": "mealType",
									"value": "breakfast",
									"description": "Meal type: breakfast, lunch, dinner, or snack"
								}
							]
						},
						"description": "Get all logged products for the current user of a specific meal type\n\nQuery Parameters:\n- mealType: Type of meal (breakfast, lunch, dinner, snack)\n\nReturns:\n- All logged products for the specified meal type\n- Calculated nutrition values for each product\n\nResponse Format:\nReturns simplified data with only essential fields and calculated nutrition values"
					},
					"response": []
				}
			],
			"description": "Product consumption tracking endpoints for users to log their daily food intake and view calculated nutrition values\n\nüí° IMPORTANT: When logging new products, you do NOT need to provide a logDate - the system automatically sets it to the current time!"
		},
		{
			"name": "Admin Management",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						},
						"description": "Get list of all users (Admin only)\n\nReturns:\n- User ID\n- Username\n- Role (USER/ADMIN)\n- Creation date"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{userId}}"
							]
						},
						"description": "Get specific user information by ID (Admin only)\n\nPath Variables:\n- userId: The ID of the user to retrieve\n\nReturns:\n- User ID\n- Username\n- Role (USER/ADMIN)\n- Creation date"
					},
					"response": []
				},
				{
					"name": "Update User Role",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role\": \"ADMIN\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin/users/{{userId}}/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{userId}}",
								"role"
							]
						},
						"description": "Update user role (Admin only)\n\nPath Variables:\n- userId: The ID of the user to update\n\nBody:\n- role: \"USER\" or \"ADMIN\"\n\nBusiness Rules:\n- Only admins can update roles\n- Cannot update your own role through this endpoint"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{userId}}"
							]
						},
						"description": "Delete a user account (Admin only)\n\nPath Variables:\n- userId: The ID of the user to delete\n\nBusiness Rules:\n- Only admins can delete users\n- Admins cannot delete themselves\n- Cannot delete the last admin user\n- Deletion is permanent and cannot be undone"
					},
					"response": []
				}
			],
			"description": "Admin user management endpoints (Admin role required)"
		},
		{
			"name": "Bulk Upload Management",
			"item": [
				{
					"name": "Create Bulk Upload",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"description": "JSON file containing product data"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin/bulk-upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"bulk-upload"
							]
						},
						"description": "Upload a JSON file containing multiple products in bulk (Admin only)\n\nForm Data:\n- file: JSON file with product data (max 10MB)\n\nFile Requirements:\n- Must be a valid JSON file\n- Must have .json extension\n- Maximum file size: 10MB\n- Maximum 1000 products per file\n\nFile Format:\n{\n  \"products\": [\n    {\n      \"ean13Code\": \"1234567890123\",\n      \"productName\": \"Product Name\",\n      \"amount\": 100.0,\n      \"unit\": \"g\",\n      \"calories\": 150.0,\n      \"protein\": 10.0,\n      \"carbs\": 20.0,\n      \"fat\": 5.0,\n      \"fiber\": 3.0,\n      \"sugar\": 2.0,\n      \"salt\": 0.5\n    }\n  ]\n}\n\nEnhanced Validation Features:\n- EAN13 codes are automatically cleaned (removes spaces, hyphens, dots, commas)\n- Smart unit parsing (accepts 'gram', 'tablespoon', 'teaspoon', etc.)\n- Calories is mandatory and must be > 0\n- Optional nutrition fields default to 0.0 if not provided\n- Detailed validation error messages with field-specific feedback\n- Partial success: existing products are filtered out, new ones are added\n\nBusiness Rules:\n- Only admins can create bulk uploads\n- All products must have unique EAN13 codes\n- If ALL products already exist, returns 409 Conflict\n- If SOME products exist, they're filtered out and new ones are added\n- Enhanced error handling with appropriate HTTP status codes\n- Transaction ensures data consistency"
					},
					"response": []
				},
				{
					"name": "Get All Bulk Uploads",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/bulk-uploads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"bulk-uploads"
							]
						},
						"description": "Get list of all bulk uploads (Admin only)\n\nReturns:\n- Bulk upload ID\n- File name\n- Product count\n- Uploaded by username\n- Upload date/time\n- Status (PROCESSING/COMPLETED/FAILED)\n- Error message (if failed)\n\nBusiness Rules:\n- Only admins can view all bulk uploads\n- Results ordered by upload date (newest first)"
					},
					"response": []
				},
				{
					"name": "Get My Bulk Uploads",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/bulk-uploads/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"bulk-uploads",
								"my"
							]
						},
						"description": "Get list of bulk uploads created by the current admin user\n\nReturns:\n- Same fields as 'Get All Bulk Uploads' but filtered to current user\n\nBusiness Rules:\n- Only admins can view their own bulk uploads\n- Results ordered by upload date (newest first)"
					},
					"response": []
				},
				{
					"name": "Get Bulk Upload by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/bulk-uploads/{{bulkUploadId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"bulk-uploads",
								"{{bulkUploadId}}"
							]
						},
						"description": "Get specific bulk upload information by ID (Admin only)\n\nPath Variables:\n- bulkUploadId: The ID of the bulk upload to retrieve\n\nReturns:\n- Same fields as 'Get All Bulk Uploads' for the specific upload"
					},
					"response": []
				},
				{
					"name": "Delete Products by Bulk Upload ID",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/bulk-uploads/{{bulkUploadId}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"bulk-uploads",
								"{{bulkUploadId}}",
								"products"
							]
						},
						"description": "Delete all products associated with a specific bulk upload (Admin only)\n\nPath Variables:\n- bulkUploadId: The ID of the bulk upload whose products should be deleted\n\nBusiness Rules:\n- Only admins can delete products by bulk upload ID\n- Deletion is permanent and cannot be undone\n- All products with the specified bulk upload ID are removed"
					},
					"response": []
				}
			],
			"description": "Bulk upload management endpoints for admins to upload and manage multiple products at once"
		},
		{
			"name": "Meals",
			"item": [
				{
					"name": "Create Meal",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mealName\": \"Healthy Breakfast\",\n    \"mealType\": \"breakfast\",\n    \"products\": [\n        {\n            \"ean13Code\": \"1234567890123\",\n            \"quantity\": 100,\n            \"unit\": \"g\"\n        },\n        {\n            \"ean13Code\": \"9876543210987\",\n            \"quantity\": 250,\n            \"unit\": \"ml\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/meals",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"meals"
							]
						},
						"description": "Create a new meal with products\n\nExample Response:\n{\n    \"id\": 1,\n    \"mealName\": \"Healthy Breakfast\",\n    \"mealType\": \"breakfast\",\n    \"createdBy\": 1,\n    \"createdAt\": \"2025-08-31T17:21:52.788779\",\n    \"updatedAt\": null,\n    \"products\": [\n        {\n            \"id\": 1,\n            \"ean13Code\": \"1234567890133\",\n            \"productName\": \"Organic Bananas\",\n            \"quantity\": 100.0,\n            \"unit\": \"g\",\n            \"nutritionInfo\": {\n                \"calories\": 89.0,\n                \"protein\": 1.1,\n                \"carbs\": 22.8,\n                \"fat\": 0.3,\n                \"fiber\": 2.6,\n                \"sugar\": 12.2,\n                \"salt\": 0.0\n            }\n        }\n    ],\n    \"totalNutrition\": {\n        \"calories\": 89.0,\n        \"protein\": 1.1,\n        \"carbs\": 22.8,\n        \"fat\": 0.3,\n        \"fiber\": 2.6,\n        \"sugar\": 12.2,\n        \"salt\": 0.0\n    }\n}\n\nNote: Nutrition values are calculated based on the actual quantity entered, not the base product amount."
					},
					"response": []
				},
				{
					"name": "Get Meal by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/meals/{{mealId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"meals",
								"{{mealId}}"
							]
						},
						"description": "Retrieve a meal by its ID\n\nReturns the complete meal with scaled nutrition information and total nutrition summary.\n\nNutrition values are calculated based on the actual quantities entered by the user, not the base product amounts."
					},
					"response": []
				},
				{
					"name": "Add Product to Meal",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ean13Code\": \"5556667778889\",\n    \"quantity\": 50,\n    \"unit\": \"g\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/meals/{{mealId}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"meals",
								"{{mealId}}",
								"products"
							]
						},
						"description": "Add a product to an existing meal"
					},
					"response": []
				},
				{
					"name": "Update Product Quantity in Meal",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 150,\n    \"unit\": \"g\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/meals/{{mealId}}/products/{{productEan}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"meals",
								"{{mealId}}",
								"products",
								"{{productEan}}"
							]
						},
						"description": "Update the quantity of a product in a meal"
					},
					"response": []
				},
				{
					"name": "Remove Product from Meal",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/meals/{{mealId}}/products/{{productEan}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"meals",
								"{{mealId}}",
								"products",
								"{{productEan}}"
							]
						},
						"description": "Remove a product from a meal"
					},
					"response": []
				},
				{
					"name": "Delete Meal",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/meals/{{mealId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"meals",
								"{{mealId}}"
							]
						},
						"description": "Delete a meal (only creator or admin)"
					},
					"response": []
				},
				{
					"name": "Log Meal",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/meals/{{mealId}}/log",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"meals",
								"{{mealId}}",
								"log"
							]
						},
						"description": "Log a meal by its ID. This will log all underlying products into the logged_products table, calculating nutritional info based on product EAN, quantity, and unit. Returns confirmation of what was logged."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/meals/{{mealId}}/log",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"meals",
										"{{mealId}}",
										"log"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"mealId\": 1,\n    \"mealName\": \"Healthy Breakfast\",\n    \"message\": \"Meal successfully logged to consumption history\",\n    \"loggedAt\": \"2025-08-31T21:20:15.123456\",\n    \"productsLogged\": 2,\n    \"loggedProductDetails\": [\n        \"1234567890133 (100.0 g)\",\n        \"1234567890125 (250.0 ml)\"\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Nutrition Reports",
			"item": [
				{
					"name": "Generate Report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reportType\": \"DAY\",\n    \"date\": \"2024-01-15\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/nutrition-reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"nutrition-reports"
							]
						},
						"description": "Generate a nutrition report for the authenticated user\n\nReport Types:\n- DAY: Single day report (use 'date' field with yyyy-MM-dd format)\n- WEEK: Weekly report (use startDate and endDate with yyyy-MM-ddTHH:mm:ss format)\n- MONTHLY: Monthly report (use 'date' field with any date in the month, yyyy-MM-dd format)\n- CUSTOM: Custom date range (use startDate and endDate with yyyy-MM-ddTHH:mm:ss format)\n\nExamples:\n- DAY: {\"reportType\": \"DAY\", \"date\": \"2024-01-15\"}\n- WEEK: {\"reportType\": \"WEEK\", \"startDate\": \"2024-01-15T00:00:00\", \"endDate\": \"2024-01-21T23:59:59\"}\n- MONTHLY: {\"reportType\": \"MONTHLY\", \"date\": \"2024-01-15\"} (covers entire January 2024)\n- CUSTOM: {\"reportType\": \"CUSTOM\", \"startDate\": \"2024-01-01T00:00:00\", \"endDate\": \"2024-01-14T23:59:59\"}\n\nResponse includes:\n- Report ID for future reference\n- Download URL for the generated PDF\n- File size and generation timestamp"
					},
					"response": []
				},
				{
					"name": "Generate Monthly Report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reportType\": \"MONTHLY\",\n    \"date\": \"2024-01-15\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/nutrition-reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"nutrition-reports"
							]
						},
						"description": "Generate a monthly nutrition report for the authenticated user\n\nMonthly Report:\n- Covers the entire month containing the specified date\n- Use any date within the target month (e.g., 2024-01-15 covers all of January 2024)\n- Automatically calculates start (1st of month) and end (last day of month) dates\n- Perfect for monthly nutrition summaries and tracking\n\nExample: {\"reportType\": \"MONTHLY\", \"date\": \"2024-01-15\"}\n\nResponse includes:\n- Report ID for future reference\n- Download URL for the generated PDF\n- File size and generation timestamp"
					},
					"response": []
				},
				{
					"name": "Generate Weekly Report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reportType\": \"WEEK\",\n    \"startDate\": \"2024-01-15T00:00:00\",\n    \"endDate\": \"2024-01-21T23:59:59\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/nutrition-reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"nutrition-reports"
							]
						},
						"description": "Generate a weekly nutrition report for the authenticated user\n\nWeekly Report:\n- Covers 1-7 days as specified by startDate and endDate\n- Validates that the range is between 1-7 days\n- Perfect for weekly nutrition tracking and analysis\n\nExample: {\"reportType\": \"WEEK\", \"startDate\": \"2024-01-15T00:00:00\", \"endDate\": \"2024-01-21T23:59:59\"}\n\nResponse includes:\n- Report ID for future reference\n- Download URL for the generated PDF\n- File size and generation timestamp"
					},
					"response": []
				},
				{
					"name": "Generate Custom Report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reportType\": \"CUSTOM\",\n    \"startDate\": \"2024-01-01T00:00:00\",\n    \"endDate\": \"2024-01-14T23:59:59\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/nutrition-reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"nutrition-reports"
							]
						},
						"description": "Generate a custom date range nutrition report for the authenticated user\n\nCustom Report:\n- Covers any date range up to 365 days\n- Use startDate and endDate to specify exact range\n- Perfect for specific tracking periods (e.g., 2 weeks, 3 months, etc.)\n- Maximum range: 365 days\n\nExample: {\"reportType\": \"CUSTOM\", \"startDate\": \"2024-01-01T00:00:00\", \"endDate\": \"2024-01-14T23:59:59\"}\n\nResponse includes:\n- Report ID for future reference\n- Download URL for the generated PDF\n- File size and generation timestamp"
					},
					"response": []
				},
				{
					"name": "Get User Reports",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/nutrition-reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"nutrition-reports"
							]
						},
						"description": "Get all nutrition reports for the authenticated user\n\nReturns a list of report summaries including:\n- Report ID and name\n- Report type and date range\n- File size and generation timestamp\n- Ordered by generation date (newest first)"
					},
					"response": []
				},
				{
					"name": "Get Report by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/nutrition-reports/{{reportId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"nutrition-reports",
								"{{reportId}}"
							]
						},
						"description": "Get a specific nutrition report by ID\n\nPath Variables:\n- reportId: The ID of the report to retrieve\n\nReturns report summary details including metadata and download information"
					},
					"response": []
				},
				{
					"name": "Download Report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/nutrition-reports/{{reportId}}/download",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"nutrition-reports",
								"{{reportId}}",
								"download"
							]
						},
						"description": "Download the PDF report file\n\nPath Variables:\n- reportId: The ID of the report to download\n\nReturns the actual PDF file as a binary download\n\nNote: This will trigger a file download in your browser/Postman"
					},
					"response": []
				},
				{
					"name": "Delete Report",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/nutrition-reports/{{reportId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"nutrition-reports",
								"{{reportId}}"
							]
						},
						"description": "Delete a nutrition report\n\nPath Variables:\n- reportId: The ID of the report to delete\n\nThis will permanently delete both the database record and the PDF file\n\nReturns 200 OK with success message"
					},
					"response": []
				}
			],
			"description": "Nutrition report generation and management endpoints\n\nüìä **Report Features**:\n- Generate comprehensive nutrition reports with progress tracking\n- Compare actual nutrition intake against user goals\n- Breakdown by meal types (breakfast, lunch, dinner, snack)\n- Download reports as PDF files\n- Track report history and manage storage\n\nüìÖ **Report Types**:\n- **DAY**: Single day analysis\n- **WEEK**: Weekly summary (1-7 days)\n- **CUSTOM**: Flexible date range (up to 365 days)\n\nüìà **Report Content**:\n- User information and report metadata\n- Progress bars showing goal achievement\n- Total nutrition summary\n- Nutrition breakdown by meal type\n- Detailed product log with timestamps\n\nüíæ **File Management**:\n- Reports are stored as files on the server\n- Each report has a unique ID for reference\n- Download URLs are provided for easy access\n- Reports can be deleted to free up storage space"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "ean13Code",
			"value": "1234567890123",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"description": "Base URL for the API"
		},
		{
			"key": "authToken",
			"value": "",
			"description": "JWT authentication token (automatically set after login)"
		},
		{
			"key": "mealId",
			"value": "1",
			"description": "ID of the meal to work with"
		},
		{
			"key": "productEan",
			"value": "1234567890123",
			"description": "EAN13 code of the product to work with"
		},
		{
			"key": "goalId",
			"value": "1",
			"description": "ID of the goal to work with"
		},
		{
			"key": "reportId",
			"value": "1",
			"description": "ID of the report to work with"
		},
		{
			"key": "userId",
			"value": "1",
			"description": "ID of the user to work with (admin only)"
		},
		{
			"key": "bulkUploadId",
			"value": "1",
			"description": "ID of the bulk upload to work with"
		},
		{
			"key": "logId",
			"value": "1",
			"description": "ID of the logged product to work with"
		},
		{
			"key": "ean13Code",
			"value": "1234567890123",
			"type": "string"
		}
	]
}
