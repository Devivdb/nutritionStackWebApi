{
	"info": {
		"_postman_id": "nutrition-stack-api",
		"name": "Nutrition Stack API",
		"description": "API collection for the Nutrition Stack Web API - User Authentication\n\n🔐 **Token Management**:\n- Run 'Register User' or 'Login User' first to get a JWT token\n- The token is automatically saved and used by all other requests\n- If you get 401/403 errors, the token is automatically cleared - just login again\n- No need to manually copy-paste tokens!",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"event": [
		{
			"listen": "test",
			"script": {
				"exec": [
					"// Collection-level script to handle authentication errors",
					"if (pm.response.code === 401 || pm.response.code === 403) {",
					"    // Clear token if authentication fails",
					"    pm.collectionVariables.unset('authToken');",
					"    console.log('Authentication failed - token cleared');",
					"    console.log('Please login again to get a new token');",
					"}"
				],
				"type": "text/javascript"
			}
		}
	],
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract token from response and set as collection variable",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.token) {",
									"        pm.collectionVariables.set('authToken', responseJson.token);",
									"        console.log('Token saved:', responseJson.token);",
									"        console.log('User registered and logged in automatically');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Login User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login with existing user credentials"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract token from response and set as collection variable",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.token) {",
									"        pm.collectionVariables.set('authToken', responseJson.token);",
									"        console.log('Token saved:', responseJson.token);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				}
			],
			"description": "User authentication endpoints"
		},
		{
			"name": "User Profile",
			"item": [
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						},
						"description": "Get current user's profile information"
					},
					"response": []
				},
				{
					"name": "Update User Profile (Both)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newusername\",\n    \"password\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						},
						"description": "Update both username and password"
					},
					"response": []
				},
				{
					"name": "Update User Profile (Username Only)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newusername\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						},
						"description": "Update only username (password remains unchanged)"
					},
					"response": []
				},
				{
					"name": "Update User Profile (Password Only)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						},
						"description": "Update only password (username remains unchanged)"
					},
					"response": []
				},
				{
					"name": "Delete User Account",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						},
						"description": "Delete current user's account permanently"
					},
					"response": []
				}
			],
			"description": "User profile management endpoints"
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Create Product",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ean13Code\": \"1234567890123\",\n    \"productName\": \"Sample Product\",\n    \"amount\": 100.0,\n    \"unit\": \"g\",\n    \"calories\": 150.0,\n    \"protein\": 10.0,\n    \"carbs\": 20.0,\n    \"fat\": 5.0,\n    \"fiber\": 3.0,\n    \"sugar\": 8.0,\n    \"salt\": 0.5\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "Create a new product\n\nBody:\n- ean13Code: 13-digit EAN13 code (required)\n- productName: Product name (required)\n- amount: Serving amount (required, must be > 0)\n- unit: Unit of measurement (required, max 50 chars)\n- calories: Calories per unit (optional, non-negative)\n- protein: Protein in grams (optional, non-negative)\n- carbs: Carbohydrates in grams (optional, non-negative)\n- fat: Fat in grams (optional, non-negative)\n- fiber: Fiber in grams (optional, non-negative)\n- sugar: Sugar in grams (optional, non-negative)\n- salt: Salt in grams (optional, non-negative)\n\nBusiness Rules:\n- Authenticated users can create products\n- EAN13 code must be unique\n- Amount must be greater than 0\n- All nutrition values must be non-negative"
					},
					"response": []
				},
				{
					"name": "Get Product by EAN13",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{ean13Code}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{ean13Code}}"
							]
						},
						"description": "Get product information by EAN13 code\n\nPath Variables:\n- ean13Code: 13-digit EAN13 code\n\nBusiness Rules:\n- Authenticated users can look up products\n- Returns 404 if product not found"
					},
					"response": []
				},
				{
					"name": "Update Product",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productName\": \"Updated Product Name\",\n    \"amount\": 150.0,\n    \"unit\": \"ml\",\n    \"calories\": 160.0,\n    \"protein\": 12.0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/{{ean13Code}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{ean13Code}}"
							]
						},
						"description": "Update product information\n\nPath Variables:\n- ean13Code: 13-digit EAN13 code\n\nBody:\n- All fields are optional - only provided fields will be updated\n- productName: Product name (max 255 chars)\n- amount: Serving amount (must be > 0)\n- unit: Unit of measurement (max 50 chars)\n- calories: Calories per unit (non-negative)\n- protein: Protein in grams (non-negative)\n- carbs: Carbohydrates in grams (non-negative)\n- fat: Fat in grams (non-negative)\n- fiber: Fiber in grams (non-negative)\n- sugar: Sugar in grams (non-negative)\n- salt: Salt in grams (non-negative)\n\nBusiness Rules:\n- Authenticated users can update products\n- Partial updates supported - only provided fields are updated\n- Amount must be greater than 0\n- All nutrition values must be non-negative"
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{ean13Code}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{ean13Code}}"
							]
						},
						"description": "Delete a product (Admin only)\n\nPath Variables:\n- ean13Code: 13-digit EAN13 code\n\nBusiness Rules:\n- Only admins can delete products\n- Deletion is permanent and cannot be undone"
					},
					"response": []
				},
				{
					"name": "Get All Products",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "Get all products in the system\n\nBusiness Rules:\n- Authenticated users can view all products\n- Returns list of all products with nutrition information"
					},
					"response": []
				}
			],
			"description": "Product management endpoints"
		},
		{
			"name": "Admin Management",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						},
						"description": "Get list of all users (Admin only)\n\nReturns:\n- User ID\n- Username\n- Role (USER/ADMIN)\n- Creation date"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{userId}}"
							]
						},
						"description": "Get specific user information by ID (Admin only)\n\nPath Variables:\n- userId: The ID of the user to retrieve\n\nReturns:\n- User ID\n- Username\n- Role (USER/ADMIN)\n- Creation date"
					},
					"response": []
				},
				{
					"name": "Update User Role",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role\": \"ADMIN\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin/users/{{userId}}/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{userId}}",
								"role"
							]
						},
						"description": "Update user role (Admin only)\n\nPath Variables:\n- userId: The ID of the user to update\n\nBody:\n- role: \"USER\" or \"ADMIN\"\n\nBusiness Rules:\n- Only admins can update roles\n- Cannot update your own role through this endpoint"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{userId}}"
							]
						},
						"description": "Delete a user account (Admin only)\n\nPath Variables:\n- userId: The ID of the user to delete\n\nBusiness Rules:\n- Only admins can delete users\n- Admins cannot delete themselves\n- Cannot delete the last admin user\n- Deletion is permanent and cannot be undone"
					},
					"response": []
				}
			],
			"description": "Admin user management endpoints (Admin role required)"
		},
		{
			"name": "Bulk Upload Management",
			"item": [
				{
					"name": "Create Bulk Upload",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"description": "JSON file containing product data"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/admin/bulk-upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"bulk-upload"
							]
						},
						"description": "Upload a JSON file containing multiple products in bulk (Admin only)\n\nForm Data:\n- file: JSON file with product data (max 10MB)\n\nFile Requirements:\n- Must be a valid JSON file\n- Must have .json extension\n- Maximum file size: 10MB\n- Maximum 1000 products per file\n\nFile Format:\n{\n  \"products\": [\n    {\n      \"ean13Code\": \"1234567890123\",\n      \"productName\": \"Product Name\",\n      \"amount\": 100.0,\n      \"unit\": \"g\",\n      \"calories\": 150.0,\n      \"protein\": 10.0,\n      \"carbs\": 20.0,\n      \"fat\": 5.0,\n      \"fiber\": 3.0,\n      \"sugar\": 2.0,\n      \"salt\": 0.5\n    }\n  ]\n}\n\nEnhanced Validation Features:\n- EAN13 codes are automatically cleaned (removes spaces, hyphens, dots, commas)\n- Smart unit parsing (accepts 'gram', 'tablespoon', 'teaspoon', etc.)\n- Calories is mandatory and must be > 0\n- Optional nutrition fields default to 0.0 if not provided\n- Detailed validation error messages with field-specific feedback\n- Partial success: existing products are filtered out, new ones are added\n\nBusiness Rules:\n- Only admins can create bulk uploads\n- All products must have unique EAN13 codes\n- If ALL products already exist, returns 409 Conflict\n- If SOME products exist, they're filtered out and new ones are added\n- Enhanced error handling with appropriate HTTP status codes\n- Transaction ensures data consistency"
					},
					"response": []
				},
				{
					"name": "Get All Bulk Uploads",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/bulk-uploads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"bulk-uploads"
							]
						},
						"description": "Get list of all bulk uploads (Admin only)\n\nReturns:\n- Bulk upload ID\n- File name\n- Product count\n- Uploaded by username\n- Upload date/time\n- Status (PROCESSING/COMPLETED/FAILED)\n- Error message (if failed)\n\nBusiness Rules:\n- Only admins can view all bulk uploads\n- Results ordered by upload date (newest first)"
					},
					"response": []
				},
				{
					"name": "Get My Bulk Uploads",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/bulk-uploads/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"bulk-uploads",
								"my"
							]
						},
						"description": "Get list of bulk uploads created by the current admin user\n\nReturns:\n- Same fields as 'Get All Bulk Uploads' but filtered to current user\n\nBusiness Rules:\n- Only admins can view their own bulk uploads\n- Results ordered by upload date (newest first)"
					},
					"response": []
				},
				{
					"name": "Get Bulk Upload by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/bulk-uploads/{{bulkUploadId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"bulk-uploads",
								"{{bulkUploadId}}"
							]
						},
						"description": "Get specific bulk upload information by ID (Admin only)\n\nPath Variables:\n- bulkUploadId: The ID of the bulk upload to retrieve\n\nReturns:\n- Same fields as 'Get All Bulk Uploads' for the specific upload"
					},
					"response": []
				},
				{
					"name": "Delete Products by Bulk Upload ID",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/bulk-uploads/{{bulkUploadId}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"bulk-uploads",
								"{{bulkUploadId}}",
								"products"
							]
						},
						"description": "Delete all products associated with a specific bulk upload (Admin only)\n\nPath Variables:\n- bulkUploadId: The ID of the bulk upload whose products should be deleted\n\nBusiness Rules:\n- Only admins can delete products by bulk upload ID\n- Deletion is permanent and cannot be undone\n- All products with the specified bulk upload ID are removed"
					},
					"response": []
				}
			],
			"description": "Bulk upload management endpoints for admins to upload and manage multiple products at once"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "ean13Code",
			"value": "1234567890123",
			"type": "string"
		}
	]
}
